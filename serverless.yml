service: mp-watch

provider:
  name: aws
  runtime: python3.6
  region: us-east-1
  stage: dev

# IAM profile
  profile: serverless

# IAM roles
  role: lambdaPermission

# Environment variables
  environment:
    # Personal AWS account
    AWS_ACCOUNT: ${file(./aws.env.yml):creds.AWS_ACCOUNT}
    # Function ARNs
    GET_MP_ARN: "arn:aws:lambda:${self:provider.region}:${file(./aws.env.yml):creds.AWS_ACCOUNT}:function:${self:service}-${self:provider.stage}-get_mp"
    PROCESS_TWEETS_ARN: "arn:aws:lambda:${self:provider.region}:${file(./aws.env.yml):creds.AWS_ACCOUNT}:function:${self:service}-${self:provider.stage}-process_tweets"
    # SECRETS
    TWITTER_CONSUMER_KEY: ${file(./twitter.env.yml):twitter.TWITTER_CONSUMER_KEY}
    TWITTER_CONSUMER_SECRET: ${file(./twitter.env.yml):twitter.TWITTER_CONSUMER_SECRET}
    TWITTER_ACCESS_TOKEN_KEY: ${file(./twitter.env.yml):twitter.TWITTER_ACCESS_TOKEN_KEY}
    TWITTER_ACCESS_TOKEN_SECRET: ${file(./twitter.env.yml):twitter.TWITTER_ACCESS_TOKEN_SECRET}
    AWS_DB: ${file(./aws.env.yml):rds.AWS_DB}
    AWS_DB_USER: ${file(./aws.env.yml):rds.AWS_DB_USER}
    AWS_DB_PASSWORD: ${file(./aws.env.yml):rds.AWS_DB_PASSWORD}
    AWS_DB_HOST: ${file(./aws.env.yml):rds.AWS_DB_HOST}


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  get_mp:
    handler: get_mp.main
  process_tweets:
    handler: process_tweets.main
    # events:
    #   - http:
    #       path: /
    #       method: post
    #       request:
    #         parameters:
    #           headers:
    #             twitter_handle: true

# CloudFormation Resource Templates
resources:
  Resources:
    lambdaPermission:
      Type: AWS::IAM::Role
      Properties:
        RoleName: lambdaPermission
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
            - PolicyName: LambdaFunctionInvocation
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: 'Allow'
                    Action:
                      - "lambda:InvokeFunction"
                    # TODO: use variables? seems to be a Serverless issue
                    Resource: "arn:aws:lambda:us-east-1:677695147188:function:mp-watch-dev-process_tweets"


plugins:
  - serverless-python-requirements
